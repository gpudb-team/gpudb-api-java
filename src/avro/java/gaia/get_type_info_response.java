/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package avro.java.gaia;  
@SuppressWarnings("all")
public class get_type_info_response extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"get_type_info_response\",\"namespace\":\"avro.java.gaia\",\"fields\":[{\"name\":\"type_ids\",\"type\":{\"type\":\"array\",\"items\":\"string\"}},{\"name\":\"type_schemas\",\"type\":{\"type\":\"array\",\"items\":\"string\"}},{\"name\":\"labels\",\"type\":{\"type\":\"array\",\"items\":\"string\"}},{\"name\":\"semantic_types\",\"type\":{\"type\":\"array\",\"items\":\"string\"}}]}");
  @Deprecated public java.util.List<java.lang.CharSequence> type_ids;
  @Deprecated public java.util.List<java.lang.CharSequence> type_schemas;
  @Deprecated public java.util.List<java.lang.CharSequence> labels;
  @Deprecated public java.util.List<java.lang.CharSequence> semantic_types;

  /**
   * Default constructor.
   */
  public get_type_info_response() {}

  /**
   * All-args constructor.
   */
  public get_type_info_response(java.util.List<java.lang.CharSequence> type_ids, java.util.List<java.lang.CharSequence> type_schemas, java.util.List<java.lang.CharSequence> labels, java.util.List<java.lang.CharSequence> semantic_types) {
    this.type_ids = type_ids;
    this.type_schemas = type_schemas;
    this.labels = labels;
    this.semantic_types = semantic_types;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return type_ids;
    case 1: return type_schemas;
    case 2: return labels;
    case 3: return semantic_types;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: type_ids = (java.util.List<java.lang.CharSequence>)value$; break;
    case 1: type_schemas = (java.util.List<java.lang.CharSequence>)value$; break;
    case 2: labels = (java.util.List<java.lang.CharSequence>)value$; break;
    case 3: semantic_types = (java.util.List<java.lang.CharSequence>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'type_ids' field.
   */
  public java.util.List<java.lang.CharSequence> getTypeIds() {
    return type_ids;
  }

  /**
   * Sets the value of the 'type_ids' field.
   * @param value the value to set.
   */
  public void setTypeIds(java.util.List<java.lang.CharSequence> value) {
    this.type_ids = value;
  }

  /**
   * Gets the value of the 'type_schemas' field.
   */
  public java.util.List<java.lang.CharSequence> getTypeSchemas() {
    return type_schemas;
  }

  /**
   * Sets the value of the 'type_schemas' field.
   * @param value the value to set.
   */
  public void setTypeSchemas(java.util.List<java.lang.CharSequence> value) {
    this.type_schemas = value;
  }

  /**
   * Gets the value of the 'labels' field.
   */
  public java.util.List<java.lang.CharSequence> getLabels() {
    return labels;
  }

  /**
   * Sets the value of the 'labels' field.
   * @param value the value to set.
   */
  public void setLabels(java.util.List<java.lang.CharSequence> value) {
    this.labels = value;
  }

  /**
   * Gets the value of the 'semantic_types' field.
   */
  public java.util.List<java.lang.CharSequence> getSemanticTypes() {
    return semantic_types;
  }

  /**
   * Sets the value of the 'semantic_types' field.
   * @param value the value to set.
   */
  public void setSemanticTypes(java.util.List<java.lang.CharSequence> value) {
    this.semantic_types = value;
  }

  /** Creates a new get_type_info_response RecordBuilder */
  public static avro.java.gaia.get_type_info_response.Builder newBuilder() {
    return new avro.java.gaia.get_type_info_response.Builder();
  }
  
  /** Creates a new get_type_info_response RecordBuilder by copying an existing Builder */
  public static avro.java.gaia.get_type_info_response.Builder newBuilder(avro.java.gaia.get_type_info_response.Builder other) {
    return new avro.java.gaia.get_type_info_response.Builder(other);
  }
  
  /** Creates a new get_type_info_response RecordBuilder by copying an existing get_type_info_response instance */
  public static avro.java.gaia.get_type_info_response.Builder newBuilder(avro.java.gaia.get_type_info_response other) {
    return new avro.java.gaia.get_type_info_response.Builder(other);
  }
  
  /**
   * RecordBuilder for get_type_info_response instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<get_type_info_response>
    implements org.apache.avro.data.RecordBuilder<get_type_info_response> {

    private java.util.List<java.lang.CharSequence> type_ids;
    private java.util.List<java.lang.CharSequence> type_schemas;
    private java.util.List<java.lang.CharSequence> labels;
    private java.util.List<java.lang.CharSequence> semantic_types;

    /** Creates a new Builder */
    private Builder() {
      super(avro.java.gaia.get_type_info_response.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(avro.java.gaia.get_type_info_response.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing get_type_info_response instance */
    private Builder(avro.java.gaia.get_type_info_response other) {
            super(avro.java.gaia.get_type_info_response.SCHEMA$);
      if (isValidValue(fields()[0], other.type_ids)) {
        this.type_ids = (java.util.List<java.lang.CharSequence>) data().deepCopy(fields()[0].schema(), other.type_ids);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.type_schemas)) {
        this.type_schemas = (java.util.List<java.lang.CharSequence>) data().deepCopy(fields()[1].schema(), other.type_schemas);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.labels)) {
        this.labels = (java.util.List<java.lang.CharSequence>) data().deepCopy(fields()[2].schema(), other.labels);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.semantic_types)) {
        this.semantic_types = (java.util.List<java.lang.CharSequence>) data().deepCopy(fields()[3].schema(), other.semantic_types);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'type_ids' field */
    public java.util.List<java.lang.CharSequence> getTypeIds() {
      return type_ids;
    }
    
    /** Sets the value of the 'type_ids' field */
    public avro.java.gaia.get_type_info_response.Builder setTypeIds(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[0], value);
      this.type_ids = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'type_ids' field has been set */
    public boolean hasTypeIds() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'type_ids' field */
    public avro.java.gaia.get_type_info_response.Builder clearTypeIds() {
      type_ids = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'type_schemas' field */
    public java.util.List<java.lang.CharSequence> getTypeSchemas() {
      return type_schemas;
    }
    
    /** Sets the value of the 'type_schemas' field */
    public avro.java.gaia.get_type_info_response.Builder setTypeSchemas(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[1], value);
      this.type_schemas = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'type_schemas' field has been set */
    public boolean hasTypeSchemas() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'type_schemas' field */
    public avro.java.gaia.get_type_info_response.Builder clearTypeSchemas() {
      type_schemas = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'labels' field */
    public java.util.List<java.lang.CharSequence> getLabels() {
      return labels;
    }
    
    /** Sets the value of the 'labels' field */
    public avro.java.gaia.get_type_info_response.Builder setLabels(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[2], value);
      this.labels = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'labels' field has been set */
    public boolean hasLabels() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'labels' field */
    public avro.java.gaia.get_type_info_response.Builder clearLabels() {
      labels = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'semantic_types' field */
    public java.util.List<java.lang.CharSequence> getSemanticTypes() {
      return semantic_types;
    }
    
    /** Sets the value of the 'semantic_types' field */
    public avro.java.gaia.get_type_info_response.Builder setSemanticTypes(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[3], value);
      this.semantic_types = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'semantic_types' field has been set */
    public boolean hasSemanticTypes() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'semantic_types' field */
    public avro.java.gaia.get_type_info_response.Builder clearSemanticTypes() {
      semantic_types = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public get_type_info_response build() {
      try {
        get_type_info_response record = new get_type_info_response();
        record.type_ids = fieldSetFlags()[0] ? this.type_ids : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[0]);
        record.type_schemas = fieldSetFlags()[1] ? this.type_schemas : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[1]);
        record.labels = fieldSetFlags()[2] ? this.labels : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[2]);
        record.semantic_types = fieldSetFlags()[3] ? this.semantic_types : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
