/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package avro.java.gaia;  
@SuppressWarnings("all")
public class register_type_transform_request extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"register_type_transform_request\",\"namespace\":\"avro.java.gaia\",\"fields\":[{\"name\":\"type_id\",\"type\":\"string\"},{\"name\":\"new_type_id\",\"type\":\"string\"},{\"name\":\"transform_map\",\"type\":{\"type\":\"map\",\"values\":\"string\"}}]}");
  @Deprecated public java.lang.CharSequence type_id;
  @Deprecated public java.lang.CharSequence new_type_id;
  @Deprecated public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> transform_map;

  /**
   * Default constructor.
   */
  public register_type_transform_request() {}

  /**
   * All-args constructor.
   */
  public register_type_transform_request(java.lang.CharSequence type_id, java.lang.CharSequence new_type_id, java.util.Map<java.lang.CharSequence,java.lang.CharSequence> transform_map) {
    this.type_id = type_id;
    this.new_type_id = new_type_id;
    this.transform_map = transform_map;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return type_id;
    case 1: return new_type_id;
    case 2: return transform_map;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: type_id = (java.lang.CharSequence)value$; break;
    case 1: new_type_id = (java.lang.CharSequence)value$; break;
    case 2: transform_map = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'type_id' field.
   */
  public java.lang.CharSequence getTypeId() {
    return type_id;
  }

  /**
   * Sets the value of the 'type_id' field.
   * @param value the value to set.
   */
  public void setTypeId(java.lang.CharSequence value) {
    this.type_id = value;
  }

  /**
   * Gets the value of the 'new_type_id' field.
   */
  public java.lang.CharSequence getNewTypeId() {
    return new_type_id;
  }

  /**
   * Sets the value of the 'new_type_id' field.
   * @param value the value to set.
   */
  public void setNewTypeId(java.lang.CharSequence value) {
    this.new_type_id = value;
  }

  /**
   * Gets the value of the 'transform_map' field.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getTransformMap() {
    return transform_map;
  }

  /**
   * Sets the value of the 'transform_map' field.
   * @param value the value to set.
   */
  public void setTransformMap(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
    this.transform_map = value;
  }

  /** Creates a new register_type_transform_request RecordBuilder */
  public static avro.java.gaia.register_type_transform_request.Builder newBuilder() {
    return new avro.java.gaia.register_type_transform_request.Builder();
  }
  
  /** Creates a new register_type_transform_request RecordBuilder by copying an existing Builder */
  public static avro.java.gaia.register_type_transform_request.Builder newBuilder(avro.java.gaia.register_type_transform_request.Builder other) {
    return new avro.java.gaia.register_type_transform_request.Builder(other);
  }
  
  /** Creates a new register_type_transform_request RecordBuilder by copying an existing register_type_transform_request instance */
  public static avro.java.gaia.register_type_transform_request.Builder newBuilder(avro.java.gaia.register_type_transform_request other) {
    return new avro.java.gaia.register_type_transform_request.Builder(other);
  }
  
  /**
   * RecordBuilder for register_type_transform_request instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<register_type_transform_request>
    implements org.apache.avro.data.RecordBuilder<register_type_transform_request> {

    private java.lang.CharSequence type_id;
    private java.lang.CharSequence new_type_id;
    private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> transform_map;

    /** Creates a new Builder */
    private Builder() {
      super(avro.java.gaia.register_type_transform_request.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(avro.java.gaia.register_type_transform_request.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing register_type_transform_request instance */
    private Builder(avro.java.gaia.register_type_transform_request other) {
            super(avro.java.gaia.register_type_transform_request.SCHEMA$);
      if (isValidValue(fields()[0], other.type_id)) {
        this.type_id = (java.lang.CharSequence) data().deepCopy(fields()[0].schema(), other.type_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.new_type_id)) {
        this.new_type_id = (java.lang.CharSequence) data().deepCopy(fields()[1].schema(), other.new_type_id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.transform_map)) {
        this.transform_map = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) data().deepCopy(fields()[2].schema(), other.transform_map);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'type_id' field */
    public java.lang.CharSequence getTypeId() {
      return type_id;
    }
    
    /** Sets the value of the 'type_id' field */
    public avro.java.gaia.register_type_transform_request.Builder setTypeId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.type_id = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'type_id' field has been set */
    public boolean hasTypeId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'type_id' field */
    public avro.java.gaia.register_type_transform_request.Builder clearTypeId() {
      type_id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'new_type_id' field */
    public java.lang.CharSequence getNewTypeId() {
      return new_type_id;
    }
    
    /** Sets the value of the 'new_type_id' field */
    public avro.java.gaia.register_type_transform_request.Builder setNewTypeId(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.new_type_id = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'new_type_id' field has been set */
    public boolean hasNewTypeId() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'new_type_id' field */
    public avro.java.gaia.register_type_transform_request.Builder clearNewTypeId() {
      new_type_id = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'transform_map' field */
    public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getTransformMap() {
      return transform_map;
    }
    
    /** Sets the value of the 'transform_map' field */
    public avro.java.gaia.register_type_transform_request.Builder setTransformMap(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
      validate(fields()[2], value);
      this.transform_map = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'transform_map' field has been set */
    public boolean hasTransformMap() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'transform_map' field */
    public avro.java.gaia.register_type_transform_request.Builder clearTransformMap() {
      transform_map = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public register_type_transform_request build() {
      try {
        register_type_transform_request record = new register_type_transform_request();
        record.type_id = fieldSetFlags()[0] ? this.type_id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.new_type_id = fieldSetFlags()[1] ? this.new_type_id : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.transform_map = fieldSetFlags()[2] ? this.transform_map : (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
