/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package avro.java.gaia;  
@SuppressWarnings("all")
public class shape_literal_intersection_request extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"shape_literal_intersection_request\",\"namespace\":\"avro.java.gaia\",\"fields\":[{\"name\":\"x_vector_1\",\"type\":{\"type\":\"array\",\"items\":\"double\"}},{\"name\":\"y_vector_1\",\"type\":{\"type\":\"array\",\"items\":\"double\"}},{\"name\":\"geometry_type_1\",\"type\":\"string\"},{\"name\":\"wkt_string_1\",\"type\":\"string\"},{\"name\":\"x_vector_2\",\"type\":{\"type\":\"array\",\"items\":\"double\"}},{\"name\":\"y_vector_2\",\"type\":{\"type\":\"array\",\"items\":\"double\"}},{\"name\":\"geometry_type_2\",\"type\":\"string\"},{\"name\":\"wkt_string_2\",\"type\":\"string\"}]}");
  @Deprecated public java.util.List<java.lang.Double> x_vector_1;
  @Deprecated public java.util.List<java.lang.Double> y_vector_1;
  @Deprecated public java.lang.CharSequence geometry_type_1;
  @Deprecated public java.lang.CharSequence wkt_string_1;
  @Deprecated public java.util.List<java.lang.Double> x_vector_2;
  @Deprecated public java.util.List<java.lang.Double> y_vector_2;
  @Deprecated public java.lang.CharSequence geometry_type_2;
  @Deprecated public java.lang.CharSequence wkt_string_2;

  /**
   * Default constructor.
   */
  public shape_literal_intersection_request() {}

  /**
   * All-args constructor.
   */
  public shape_literal_intersection_request(java.util.List<java.lang.Double> x_vector_1, java.util.List<java.lang.Double> y_vector_1, java.lang.CharSequence geometry_type_1, java.lang.CharSequence wkt_string_1, java.util.List<java.lang.Double> x_vector_2, java.util.List<java.lang.Double> y_vector_2, java.lang.CharSequence geometry_type_2, java.lang.CharSequence wkt_string_2) {
    this.x_vector_1 = x_vector_1;
    this.y_vector_1 = y_vector_1;
    this.geometry_type_1 = geometry_type_1;
    this.wkt_string_1 = wkt_string_1;
    this.x_vector_2 = x_vector_2;
    this.y_vector_2 = y_vector_2;
    this.geometry_type_2 = geometry_type_2;
    this.wkt_string_2 = wkt_string_2;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return x_vector_1;
    case 1: return y_vector_1;
    case 2: return geometry_type_1;
    case 3: return wkt_string_1;
    case 4: return x_vector_2;
    case 5: return y_vector_2;
    case 6: return geometry_type_2;
    case 7: return wkt_string_2;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: x_vector_1 = (java.util.List<java.lang.Double>)value$; break;
    case 1: y_vector_1 = (java.util.List<java.lang.Double>)value$; break;
    case 2: geometry_type_1 = (java.lang.CharSequence)value$; break;
    case 3: wkt_string_1 = (java.lang.CharSequence)value$; break;
    case 4: x_vector_2 = (java.util.List<java.lang.Double>)value$; break;
    case 5: y_vector_2 = (java.util.List<java.lang.Double>)value$; break;
    case 6: geometry_type_2 = (java.lang.CharSequence)value$; break;
    case 7: wkt_string_2 = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'x_vector_1' field.
   */
  public java.util.List<java.lang.Double> getXVector1() {
    return x_vector_1;
  }

  /**
   * Sets the value of the 'x_vector_1' field.
   * @param value the value to set.
   */
  public void setXVector1(java.util.List<java.lang.Double> value) {
    this.x_vector_1 = value;
  }

  /**
   * Gets the value of the 'y_vector_1' field.
   */
  public java.util.List<java.lang.Double> getYVector1() {
    return y_vector_1;
  }

  /**
   * Sets the value of the 'y_vector_1' field.
   * @param value the value to set.
   */
  public void setYVector1(java.util.List<java.lang.Double> value) {
    this.y_vector_1 = value;
  }

  /**
   * Gets the value of the 'geometry_type_1' field.
   */
  public java.lang.CharSequence getGeometryType1() {
    return geometry_type_1;
  }

  /**
   * Sets the value of the 'geometry_type_1' field.
   * @param value the value to set.
   */
  public void setGeometryType1(java.lang.CharSequence value) {
    this.geometry_type_1 = value;
  }

  /**
   * Gets the value of the 'wkt_string_1' field.
   */
  public java.lang.CharSequence getWktString1() {
    return wkt_string_1;
  }

  /**
   * Sets the value of the 'wkt_string_1' field.
   * @param value the value to set.
   */
  public void setWktString1(java.lang.CharSequence value) {
    this.wkt_string_1 = value;
  }

  /**
   * Gets the value of the 'x_vector_2' field.
   */
  public java.util.List<java.lang.Double> getXVector2() {
    return x_vector_2;
  }

  /**
   * Sets the value of the 'x_vector_2' field.
   * @param value the value to set.
   */
  public void setXVector2(java.util.List<java.lang.Double> value) {
    this.x_vector_2 = value;
  }

  /**
   * Gets the value of the 'y_vector_2' field.
   */
  public java.util.List<java.lang.Double> getYVector2() {
    return y_vector_2;
  }

  /**
   * Sets the value of the 'y_vector_2' field.
   * @param value the value to set.
   */
  public void setYVector2(java.util.List<java.lang.Double> value) {
    this.y_vector_2 = value;
  }

  /**
   * Gets the value of the 'geometry_type_2' field.
   */
  public java.lang.CharSequence getGeometryType2() {
    return geometry_type_2;
  }

  /**
   * Sets the value of the 'geometry_type_2' field.
   * @param value the value to set.
   */
  public void setGeometryType2(java.lang.CharSequence value) {
    this.geometry_type_2 = value;
  }

  /**
   * Gets the value of the 'wkt_string_2' field.
   */
  public java.lang.CharSequence getWktString2() {
    return wkt_string_2;
  }

  /**
   * Sets the value of the 'wkt_string_2' field.
   * @param value the value to set.
   */
  public void setWktString2(java.lang.CharSequence value) {
    this.wkt_string_2 = value;
  }

  /** Creates a new shape_literal_intersection_request RecordBuilder */
  public static avro.java.gaia.shape_literal_intersection_request.Builder newBuilder() {
    return new avro.java.gaia.shape_literal_intersection_request.Builder();
  }
  
  /** Creates a new shape_literal_intersection_request RecordBuilder by copying an existing Builder */
  public static avro.java.gaia.shape_literal_intersection_request.Builder newBuilder(avro.java.gaia.shape_literal_intersection_request.Builder other) {
    return new avro.java.gaia.shape_literal_intersection_request.Builder(other);
  }
  
  /** Creates a new shape_literal_intersection_request RecordBuilder by copying an existing shape_literal_intersection_request instance */
  public static avro.java.gaia.shape_literal_intersection_request.Builder newBuilder(avro.java.gaia.shape_literal_intersection_request other) {
    return new avro.java.gaia.shape_literal_intersection_request.Builder(other);
  }
  
  /**
   * RecordBuilder for shape_literal_intersection_request instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<shape_literal_intersection_request>
    implements org.apache.avro.data.RecordBuilder<shape_literal_intersection_request> {

    private java.util.List<java.lang.Double> x_vector_1;
    private java.util.List<java.lang.Double> y_vector_1;
    private java.lang.CharSequence geometry_type_1;
    private java.lang.CharSequence wkt_string_1;
    private java.util.List<java.lang.Double> x_vector_2;
    private java.util.List<java.lang.Double> y_vector_2;
    private java.lang.CharSequence geometry_type_2;
    private java.lang.CharSequence wkt_string_2;

    /** Creates a new Builder */
    private Builder() {
      super(avro.java.gaia.shape_literal_intersection_request.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(avro.java.gaia.shape_literal_intersection_request.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing shape_literal_intersection_request instance */
    private Builder(avro.java.gaia.shape_literal_intersection_request other) {
            super(avro.java.gaia.shape_literal_intersection_request.SCHEMA$);
      if (isValidValue(fields()[0], other.x_vector_1)) {
        this.x_vector_1 = (java.util.List<java.lang.Double>) data().deepCopy(fields()[0].schema(), other.x_vector_1);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.y_vector_1)) {
        this.y_vector_1 = (java.util.List<java.lang.Double>) data().deepCopy(fields()[1].schema(), other.y_vector_1);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.geometry_type_1)) {
        this.geometry_type_1 = (java.lang.CharSequence) data().deepCopy(fields()[2].schema(), other.geometry_type_1);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.wkt_string_1)) {
        this.wkt_string_1 = (java.lang.CharSequence) data().deepCopy(fields()[3].schema(), other.wkt_string_1);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.x_vector_2)) {
        this.x_vector_2 = (java.util.List<java.lang.Double>) data().deepCopy(fields()[4].schema(), other.x_vector_2);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.y_vector_2)) {
        this.y_vector_2 = (java.util.List<java.lang.Double>) data().deepCopy(fields()[5].schema(), other.y_vector_2);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.geometry_type_2)) {
        this.geometry_type_2 = (java.lang.CharSequence) data().deepCopy(fields()[6].schema(), other.geometry_type_2);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.wkt_string_2)) {
        this.wkt_string_2 = (java.lang.CharSequence) data().deepCopy(fields()[7].schema(), other.wkt_string_2);
        fieldSetFlags()[7] = true;
      }
    }

    /** Gets the value of the 'x_vector_1' field */
    public java.util.List<java.lang.Double> getXVector1() {
      return x_vector_1;
    }
    
    /** Sets the value of the 'x_vector_1' field */
    public avro.java.gaia.shape_literal_intersection_request.Builder setXVector1(java.util.List<java.lang.Double> value) {
      validate(fields()[0], value);
      this.x_vector_1 = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'x_vector_1' field has been set */
    public boolean hasXVector1() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'x_vector_1' field */
    public avro.java.gaia.shape_literal_intersection_request.Builder clearXVector1() {
      x_vector_1 = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'y_vector_1' field */
    public java.util.List<java.lang.Double> getYVector1() {
      return y_vector_1;
    }
    
    /** Sets the value of the 'y_vector_1' field */
    public avro.java.gaia.shape_literal_intersection_request.Builder setYVector1(java.util.List<java.lang.Double> value) {
      validate(fields()[1], value);
      this.y_vector_1 = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'y_vector_1' field has been set */
    public boolean hasYVector1() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'y_vector_1' field */
    public avro.java.gaia.shape_literal_intersection_request.Builder clearYVector1() {
      y_vector_1 = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'geometry_type_1' field */
    public java.lang.CharSequence getGeometryType1() {
      return geometry_type_1;
    }
    
    /** Sets the value of the 'geometry_type_1' field */
    public avro.java.gaia.shape_literal_intersection_request.Builder setGeometryType1(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.geometry_type_1 = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'geometry_type_1' field has been set */
    public boolean hasGeometryType1() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'geometry_type_1' field */
    public avro.java.gaia.shape_literal_intersection_request.Builder clearGeometryType1() {
      geometry_type_1 = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'wkt_string_1' field */
    public java.lang.CharSequence getWktString1() {
      return wkt_string_1;
    }
    
    /** Sets the value of the 'wkt_string_1' field */
    public avro.java.gaia.shape_literal_intersection_request.Builder setWktString1(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.wkt_string_1 = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'wkt_string_1' field has been set */
    public boolean hasWktString1() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'wkt_string_1' field */
    public avro.java.gaia.shape_literal_intersection_request.Builder clearWktString1() {
      wkt_string_1 = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'x_vector_2' field */
    public java.util.List<java.lang.Double> getXVector2() {
      return x_vector_2;
    }
    
    /** Sets the value of the 'x_vector_2' field */
    public avro.java.gaia.shape_literal_intersection_request.Builder setXVector2(java.util.List<java.lang.Double> value) {
      validate(fields()[4], value);
      this.x_vector_2 = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'x_vector_2' field has been set */
    public boolean hasXVector2() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'x_vector_2' field */
    public avro.java.gaia.shape_literal_intersection_request.Builder clearXVector2() {
      x_vector_2 = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'y_vector_2' field */
    public java.util.List<java.lang.Double> getYVector2() {
      return y_vector_2;
    }
    
    /** Sets the value of the 'y_vector_2' field */
    public avro.java.gaia.shape_literal_intersection_request.Builder setYVector2(java.util.List<java.lang.Double> value) {
      validate(fields()[5], value);
      this.y_vector_2 = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'y_vector_2' field has been set */
    public boolean hasYVector2() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'y_vector_2' field */
    public avro.java.gaia.shape_literal_intersection_request.Builder clearYVector2() {
      y_vector_2 = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'geometry_type_2' field */
    public java.lang.CharSequence getGeometryType2() {
      return geometry_type_2;
    }
    
    /** Sets the value of the 'geometry_type_2' field */
    public avro.java.gaia.shape_literal_intersection_request.Builder setGeometryType2(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.geometry_type_2 = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'geometry_type_2' field has been set */
    public boolean hasGeometryType2() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'geometry_type_2' field */
    public avro.java.gaia.shape_literal_intersection_request.Builder clearGeometryType2() {
      geometry_type_2 = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'wkt_string_2' field */
    public java.lang.CharSequence getWktString2() {
      return wkt_string_2;
    }
    
    /** Sets the value of the 'wkt_string_2' field */
    public avro.java.gaia.shape_literal_intersection_request.Builder setWktString2(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.wkt_string_2 = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'wkt_string_2' field has been set */
    public boolean hasWktString2() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'wkt_string_2' field */
    public avro.java.gaia.shape_literal_intersection_request.Builder clearWktString2() {
      wkt_string_2 = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    public shape_literal_intersection_request build() {
      try {
        shape_literal_intersection_request record = new shape_literal_intersection_request();
        record.x_vector_1 = fieldSetFlags()[0] ? this.x_vector_1 : (java.util.List<java.lang.Double>) defaultValue(fields()[0]);
        record.y_vector_1 = fieldSetFlags()[1] ? this.y_vector_1 : (java.util.List<java.lang.Double>) defaultValue(fields()[1]);
        record.geometry_type_1 = fieldSetFlags()[2] ? this.geometry_type_1 : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.wkt_string_1 = fieldSetFlags()[3] ? this.wkt_string_1 : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.x_vector_2 = fieldSetFlags()[4] ? this.x_vector_2 : (java.util.List<java.lang.Double>) defaultValue(fields()[4]);
        record.y_vector_2 = fieldSetFlags()[5] ? this.y_vector_2 : (java.util.List<java.lang.Double>) defaultValue(fields()[5]);
        record.geometry_type_2 = fieldSetFlags()[6] ? this.geometry_type_2 : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.wkt_string_2 = fieldSetFlags()[7] ? this.wkt_string_2 : (java.lang.CharSequence) defaultValue(fields()[7]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
