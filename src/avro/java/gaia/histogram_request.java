/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package avro.java.gaia;  
@SuppressWarnings("all")
public class histogram_request extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"histogram_request\",\"namespace\":\"avro.java.gaia\",\"fields\":[{\"name\":\"attribute\",\"type\":\"string\"},{\"name\":\"end\",\"type\":\"double\"},{\"name\":\"interval\",\"type\":\"long\"},{\"name\":\"set_id\",\"type\":\"string\"},{\"name\":\"start\",\"type\":\"double\"},{\"name\":\"user_auth_string\",\"type\":\"string\"}]}");
  @Deprecated public java.lang.CharSequence attribute;
  @Deprecated public double end;
  @Deprecated public long interval;
  @Deprecated public java.lang.CharSequence set_id;
  @Deprecated public double start;
  @Deprecated public java.lang.CharSequence user_auth_string;

  /**
   * Default constructor.
   */
  public histogram_request() {}

  /**
   * All-args constructor.
   */
  public histogram_request(java.lang.CharSequence attribute, java.lang.Double end, java.lang.Long interval, java.lang.CharSequence set_id, java.lang.Double start, java.lang.CharSequence user_auth_string) {
    this.attribute = attribute;
    this.end = end;
    this.interval = interval;
    this.set_id = set_id;
    this.start = start;
    this.user_auth_string = user_auth_string;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return attribute;
    case 1: return end;
    case 2: return interval;
    case 3: return set_id;
    case 4: return start;
    case 5: return user_auth_string;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: attribute = (java.lang.CharSequence)value$; break;
    case 1: end = (java.lang.Double)value$; break;
    case 2: interval = (java.lang.Long)value$; break;
    case 3: set_id = (java.lang.CharSequence)value$; break;
    case 4: start = (java.lang.Double)value$; break;
    case 5: user_auth_string = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'attribute' field.
   */
  public java.lang.CharSequence getAttribute() {
    return attribute;
  }

  /**
   * Sets the value of the 'attribute' field.
   * @param value the value to set.
   */
  public void setAttribute(java.lang.CharSequence value) {
    this.attribute = value;
  }

  /**
   * Gets the value of the 'end' field.
   */
  public java.lang.Double getEnd() {
    return end;
  }

  /**
   * Sets the value of the 'end' field.
   * @param value the value to set.
   */
  public void setEnd(java.lang.Double value) {
    this.end = value;
  }

  /**
   * Gets the value of the 'interval' field.
   */
  public java.lang.Long getInterval() {
    return interval;
  }

  /**
   * Sets the value of the 'interval' field.
   * @param value the value to set.
   */
  public void setInterval(java.lang.Long value) {
    this.interval = value;
  }

  /**
   * Gets the value of the 'set_id' field.
   */
  public java.lang.CharSequence getSetId() {
    return set_id;
  }

  /**
   * Sets the value of the 'set_id' field.
   * @param value the value to set.
   */
  public void setSetId(java.lang.CharSequence value) {
    this.set_id = value;
  }

  /**
   * Gets the value of the 'start' field.
   */
  public java.lang.Double getStart() {
    return start;
  }

  /**
   * Sets the value of the 'start' field.
   * @param value the value to set.
   */
  public void setStart(java.lang.Double value) {
    this.start = value;
  }

  /**
   * Gets the value of the 'user_auth_string' field.
   */
  public java.lang.CharSequence getUserAuthString() {
    return user_auth_string;
  }

  /**
   * Sets the value of the 'user_auth_string' field.
   * @param value the value to set.
   */
  public void setUserAuthString(java.lang.CharSequence value) {
    this.user_auth_string = value;
  }

  /** Creates a new histogram_request RecordBuilder */
  public static avro.java.gaia.histogram_request.Builder newBuilder() {
    return new avro.java.gaia.histogram_request.Builder();
  }
  
  /** Creates a new histogram_request RecordBuilder by copying an existing Builder */
  public static avro.java.gaia.histogram_request.Builder newBuilder(avro.java.gaia.histogram_request.Builder other) {
    return new avro.java.gaia.histogram_request.Builder(other);
  }
  
  /** Creates a new histogram_request RecordBuilder by copying an existing histogram_request instance */
  public static avro.java.gaia.histogram_request.Builder newBuilder(avro.java.gaia.histogram_request other) {
    return new avro.java.gaia.histogram_request.Builder(other);
  }
  
  /**
   * RecordBuilder for histogram_request instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<histogram_request>
    implements org.apache.avro.data.RecordBuilder<histogram_request> {

    private java.lang.CharSequence attribute;
    private double end;
    private long interval;
    private java.lang.CharSequence set_id;
    private double start;
    private java.lang.CharSequence user_auth_string;

    /** Creates a new Builder */
    private Builder() {
      super(avro.java.gaia.histogram_request.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(avro.java.gaia.histogram_request.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing histogram_request instance */
    private Builder(avro.java.gaia.histogram_request other) {
            super(avro.java.gaia.histogram_request.SCHEMA$);
      if (isValidValue(fields()[0], other.attribute)) {
        this.attribute = (java.lang.CharSequence) data().deepCopy(fields()[0].schema(), other.attribute);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.end)) {
        this.end = (java.lang.Double) data().deepCopy(fields()[1].schema(), other.end);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.interval)) {
        this.interval = (java.lang.Long) data().deepCopy(fields()[2].schema(), other.interval);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.set_id)) {
        this.set_id = (java.lang.CharSequence) data().deepCopy(fields()[3].schema(), other.set_id);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.start)) {
        this.start = (java.lang.Double) data().deepCopy(fields()[4].schema(), other.start);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.user_auth_string)) {
        this.user_auth_string = (java.lang.CharSequence) data().deepCopy(fields()[5].schema(), other.user_auth_string);
        fieldSetFlags()[5] = true;
      }
    }

    /** Gets the value of the 'attribute' field */
    public java.lang.CharSequence getAttribute() {
      return attribute;
    }
    
    /** Sets the value of the 'attribute' field */
    public avro.java.gaia.histogram_request.Builder setAttribute(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.attribute = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'attribute' field has been set */
    public boolean hasAttribute() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'attribute' field */
    public avro.java.gaia.histogram_request.Builder clearAttribute() {
      attribute = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'end' field */
    public java.lang.Double getEnd() {
      return end;
    }
    
    /** Sets the value of the 'end' field */
    public avro.java.gaia.histogram_request.Builder setEnd(double value) {
      validate(fields()[1], value);
      this.end = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'end' field has been set */
    public boolean hasEnd() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'end' field */
    public avro.java.gaia.histogram_request.Builder clearEnd() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'interval' field */
    public java.lang.Long getInterval() {
      return interval;
    }
    
    /** Sets the value of the 'interval' field */
    public avro.java.gaia.histogram_request.Builder setInterval(long value) {
      validate(fields()[2], value);
      this.interval = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'interval' field has been set */
    public boolean hasInterval() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'interval' field */
    public avro.java.gaia.histogram_request.Builder clearInterval() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'set_id' field */
    public java.lang.CharSequence getSetId() {
      return set_id;
    }
    
    /** Sets the value of the 'set_id' field */
    public avro.java.gaia.histogram_request.Builder setSetId(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.set_id = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'set_id' field has been set */
    public boolean hasSetId() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'set_id' field */
    public avro.java.gaia.histogram_request.Builder clearSetId() {
      set_id = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'start' field */
    public java.lang.Double getStart() {
      return start;
    }
    
    /** Sets the value of the 'start' field */
    public avro.java.gaia.histogram_request.Builder setStart(double value) {
      validate(fields()[4], value);
      this.start = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'start' field has been set */
    public boolean hasStart() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'start' field */
    public avro.java.gaia.histogram_request.Builder clearStart() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'user_auth_string' field */
    public java.lang.CharSequence getUserAuthString() {
      return user_auth_string;
    }
    
    /** Sets the value of the 'user_auth_string' field */
    public avro.java.gaia.histogram_request.Builder setUserAuthString(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.user_auth_string = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'user_auth_string' field has been set */
    public boolean hasUserAuthString() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'user_auth_string' field */
    public avro.java.gaia.histogram_request.Builder clearUserAuthString() {
      user_auth_string = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    public histogram_request build() {
      try {
        histogram_request record = new histogram_request();
        record.attribute = fieldSetFlags()[0] ? this.attribute : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.end = fieldSetFlags()[1] ? this.end : (java.lang.Double) defaultValue(fields()[1]);
        record.interval = fieldSetFlags()[2] ? this.interval : (java.lang.Long) defaultValue(fields()[2]);
        record.set_id = fieldSetFlags()[3] ? this.set_id : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.start = fieldSetFlags()[4] ? this.start : (java.lang.Double) defaultValue(fields()[4]);
        record.user_auth_string = fieldSetFlags()[5] ? this.user_auth_string : (java.lang.CharSequence) defaultValue(fields()[5]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
