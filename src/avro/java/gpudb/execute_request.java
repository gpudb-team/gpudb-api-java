/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package avro.java.gpudb;  
@SuppressWarnings("all")
public class execute_request extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"execute_request\",\"namespace\":\"avro.java.gpudb\",\"fields\":[{\"name\":\"statement\",\"type\":\"string\"}]}");
  @Deprecated public java.lang.CharSequence statement;

  /**
   * Default constructor.
   */
  public execute_request() {}

  /**
   * All-args constructor.
   */
  public execute_request(java.lang.CharSequence statement) {
    this.statement = statement;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return statement;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: statement = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'statement' field.
   */
  public java.lang.CharSequence getStatement() {
    return statement;
  }

  /**
   * Sets the value of the 'statement' field.
   * @param value the value to set.
   */
  public void setStatement(java.lang.CharSequence value) {
    this.statement = value;
  }

  /** Creates a new execute_request RecordBuilder */
  public static avro.java.gpudb.execute_request.Builder newBuilder() {
    return new avro.java.gpudb.execute_request.Builder();
  }
  
  /** Creates a new execute_request RecordBuilder by copying an existing Builder */
  public static avro.java.gpudb.execute_request.Builder newBuilder(avro.java.gpudb.execute_request.Builder other) {
    return new avro.java.gpudb.execute_request.Builder(other);
  }
  
  /** Creates a new execute_request RecordBuilder by copying an existing execute_request instance */
  public static avro.java.gpudb.execute_request.Builder newBuilder(avro.java.gpudb.execute_request other) {
    return new avro.java.gpudb.execute_request.Builder(other);
  }
  
  /**
   * RecordBuilder for execute_request instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<execute_request>
    implements org.apache.avro.data.RecordBuilder<execute_request> {

    private java.lang.CharSequence statement;

    /** Creates a new Builder */
    private Builder() {
      super(avro.java.gpudb.execute_request.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(avro.java.gpudb.execute_request.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing execute_request instance */
    private Builder(avro.java.gpudb.execute_request other) {
            super(avro.java.gpudb.execute_request.SCHEMA$);
      if (isValidValue(fields()[0], other.statement)) {
        this.statement = (java.lang.CharSequence) data().deepCopy(fields()[0].schema(), other.statement);
        fieldSetFlags()[0] = true;
      }
    }

    /** Gets the value of the 'statement' field */
    public java.lang.CharSequence getStatement() {
      return statement;
    }
    
    /** Sets the value of the 'statement' field */
    public avro.java.gpudb.execute_request.Builder setStatement(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.statement = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'statement' field has been set */
    public boolean hasStatement() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'statement' field */
    public avro.java.gpudb.execute_request.Builder clearStatement() {
      statement = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    public execute_request build() {
      try {
        execute_request record = new execute_request();
        record.statement = fieldSetFlags()[0] ? this.statement : (java.lang.CharSequence) defaultValue(fields()[0]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
